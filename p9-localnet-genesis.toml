# An example genesis configuration file to construct a localnet protocol 9 genesis.
# This creates a genesis with
# - 3 bakers
# - one additional foundation account
# - 10 additional localnet accounts
# - 3 identity providers
# - 3 anonymity revokers
# - 3 update keys for each of root, level1, and level2
# - level2 update keys authorized for all update types
# - only one key is needed for updates at each level
# - genesis time set to the time when the tool runs
# - minimum block time set to 1 second

protocolVersion = "9"

[out]
updateKeys = "./chain/update-keys"
accountKeys = "./chain/accounts"
bakerKeys = "./chain/bakers"
identityProviders = "./chain/idps"
anonymityRevokers = "./chain/ars"
genesis = "./chain/genesis.dat"
cryptographicParameters = "./chain/global"
deleteExisting = true
genesisHash = "./chain/genesis_hash"

[cryptographicParameters]
kind = "generate"
genesisString = "LocalNet genesis parameters."

[[anonymityRevokers]]
kind = "fresh"
id = 1
repeat = 3

[[identityProviders]]
kind = "fresh"
id = 0
repeat = 3

[[accounts]]
kind = "fresh"
balance = "1000000000000000"
stake = "500000000000000"
template = "baker"
identityProvider = 0
numKeys = 1
threshold = 1
repeat = 1

[[accounts]]
kind = "fresh"
balance = "1000000000000000"
template = "foundation"
identityProvider = 0
numKeys = 1
threshold = 1
repeat = 1
foundation = true

[[accounts]]
kind = "fresh"
balance = "2000000000000"
template = "localnet"
identityProvider = 0
numKeys = 1
threshold = 1
repeat = 10


[updates]
root = { threshold = 1, keys = [{kind = "fresh", repeat = 3}]}
level1 = { threshold = 1, keys = [{kind = "fresh", repeat = 3}]}

[updates.level2]
keys = [{kind = "fresh", repeat = 3}]
emergency = {authorizedKeys = [0,1,2], threshold = 1}
protocol = {authorizedKeys = [0,1,2], threshold = 1}
electionDifficulty = {authorizedKeys = [0,1,2], threshold = 1}
euroPerEnergy = {authorizedKeys = [0,1,2], threshold = 1}
microCCDPerEuro = {authorizedKeys = [0,1,2], threshold = 1}
foundationAccount = {authorizedKeys = [0,1,2], threshold = 1}
mintDistribution = {authorizedKeys = [0,1,2], threshold = 1}
transactionFeeDistribution = {authorizedKeys = [0,1,2], threshold = 1}
gasRewards = {authorizedKeys = [0,1,2], threshold = 1}
poolParameters = {authorizedKeys = [0,1,2], threshold = 1}
addAnonymityRevoker = {authorizedKeys = [0,1,2], threshold = 1}
addIdentityProvider = {authorizedKeys = [0,1,2], threshold = 1}
cooldownParameters = {authorizedKeys = [0,1,2], threshold = 1}
timeParameters = {authorizedKeys = [0,1,2], threshold = 1}
createPlt = {authorizedKeys = [0,1,2], threshold = 1}

[parameters]
# genesisTime = "2022-06-24T11:12:43Z" # Falls back to use the current time for genesis time.
leadershipElectionNonce = "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1"
epochDuration = "1h" # Meaning 1 hour.
signatureThreshold = {numerator = 2, denominator = 3} # Must be between 2/3 and 1.

[parameters.chain]
minBlockTime = "1s" # Meaning 1 second.
blockEnergyLimit = 3_000_000
euroPerEnergy = 0.00002
microCCDPerEuro = 500_000
accountCreationLimit = 10

[parameters.chain.timeoutParameters]
base = "2s" # Meaning 2 seconds
increase = 1.25 # Must be greater than 1.
decrease = 0.8 # Must be between 0 and 1.

[parameters.chain.finalizationCommitteeParameters]
minFinalizers = 3
maxFinalizers = 3
finalizersRelativeStakeThreshold = 200 # parts per hundred thousand (n / 100000).

[parameters.chain.timeParameters]
rewardPeriodLength = 4 # 4 epochs
mintPerPayday = 2.61157877e-4

[parameters.chain.poolParameters]
passiveFinalizationCommission = 1.0
passiveBakingCommission = 0.12
passiveTransactionCommission = 0.12
finalizationCommissionRange = {max = 1.0, min = 1.0}
bakingCommissionRange = {max = 0.1, min = 0.1}
transactionCommissionRange = {max = 0.1, min = 0.1}
minimumEquityCapital = "1000"
capitalBound = 0.1
leverageBound = {denominator = 1, numerator = 3}

[parameters.chain.cooldownParameters]
poolOwnerCooldown = 800 # in seconds
delegatorCooldown = 1000 # in seconds

[parameters.chain.rewardParameters]
mintDistribution = { bakingReward = 0.85, finalizationReward = 0.05 }
transactionFeeDistribution = { baker = 0.45, gasAccount = 0.45 }
gASRewards = { baker = 0.25, accountCreation = 0.02, chainUpdate = 0.005 }

[parameters.chain.validatorScoreParameters]
maxMissedRounds = 10
